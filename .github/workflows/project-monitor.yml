name: Monitor GitHub Project Moves

on:
  #schedule:
  #  - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch:

jobs:
  check_project:
    runs-on: ubuntu-latest
    steps:
      - name: Restore Last PR Move State from Cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: /tmp/last_pr_move.json
          key: last-pr-move-cache
          restore-keys: last-pr-move-cache

      - name: Ensure Last PR Move File Exists
        run: |
          mkdir -p /tmp
          LAST_PR_MOVE="/tmp/last_pr_move.json"

          if [ ! -f "$LAST_PR_MOVE" ]; then
            echo "⚠️ No previous PR move state found. Creating a new one."
            echo '{"title": "INIT", "column": "INIT"}' > "$LAST_PR_MOVE"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Load Last PR Move State
        run: |
          LAST_PR_MOVE="/tmp/last_pr_move.json"
          echo "Checking previous PR move state..."
          cat "$LAST_PR_MOVE" || echo "{}"

          echo "LAST_PR_MOVE=$LAST_PR_MOVE" >> $GITHUB_ENV
          echo "EMAIL_SHOULD_SEND=true" >> $GITHUB_ENV # Default to sending email

      - name: Query GitHub Project for Moved Cards
        id: query-project
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PROJECT_ID: "PVT_kwHOAxVMgM4AxMpK"
        run: |
          echo "Fetching project data..."
          QUERY='
          {
            node(id: "'"$PROJECT_ID"'") {
              ... on ProjectV2 {
                id
                fields(first: 20) {
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      name
                      options {
                        id
                        name
                        description
                      }
                    }
                  }
                }
                items(first: 10) {
                  nodes {
                    id
                    content {
                      ... on PullRequest {
                        title
                        url
                      }
                    }
                    fieldValues(first: 10) {
                      nodes {
                        __typename
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                          optionId
                        }
                      }
                    }
                  }
                }
              }
            }
          }'
          RESPONSE=$(gh api graphql -f query="$QUERY")

          echo "GraphQL Response: $RESPONSE"

          PR_TITLE=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].content.title // "Unknown PR"')
          PR_LINK=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].content.url // "No link available"')
          COLUMN_NAME=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].fieldValues.nodes[] | select(.__typename=="ProjectV2ItemFieldSingleSelectValue") | .name // "Unknown Column"')
          OPTION_ID=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].fieldValues.nodes[] | select(.__typename=="ProjectV2ItemFieldSingleSelectValue") | .optionId // empty')

          COLUMN_DESCRIPTION=$(echo "$RESPONSE" | jq -r --arg optionId "$OPTION_ID" '
            .data.node.fields.nodes[] 
            | select(.name=="Status") 
            | .options[] 
            | select(.id==$optionId) 
            | .description // "No description available."')

          echo "Setting PR environment variables..."
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV
          echo "COLUMN_NAME=$COLUMN_NAME" >> $GITHUB_ENV
          echo "COLUMN_DESCRIPTION=$COLUMN_DESCRIPTION" >> $GITHUB_ENV

          LAST_PR_MOVE="${{ env.LAST_PR_MOVE }}"
          if [ -f "$LAST_PR_MOVE" ]; then
            LAST_PR_TITLE=$(jq -r '.title' "$LAST_PR_MOVE")
            LAST_COLUMN_NAME=$(jq -r '.column' "$LAST_PR_MOVE")

            echo "🔍 Previous PR: $LAST_PR_TITLE was in column: $LAST_COLUMN_NAME"
            echo "🔍 Current PR: $PR_TITLE is in column: $COLUMN_NAME"

            if [[ "$PR_TITLE" == "$LAST_PR_TITLE" && "$COLUMN_NAME" == "$LAST_COLUMN_NAME" ]]; then
              echo "✅ No PR move detected. Exiting."
              echo "EMAIL_SHOULD_SEND=false" >> $GITHUB_ENV  # 🚨 Stop email from sending
              exit 0
            fi
          fi

          echo "{\"title\": \"$PR_TITLE\", \"column\": \"$COLUMN_NAME\"}" > "$LAST_PR_MOVE"
          chmod 644 "$LAST_PR_MOVE"

          echo "✅ Detected PR: $PR_TITLE moved to $COLUMN_NAME - $COLUMN_DESCRIPTION"

      - name: Save Last PR Move State to Cache
        if: success()
        uses: actions/cache@v4
        with:
          path: /tmp/last_pr_move.json
          key: last-pr-move-cache

      - name: Send Email via SendGrid API (GitHub Script)
        if: env.EMAIL_SHOULD_SEND == 'true'
        uses: actions/github-script@v6
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        with:
          script: |
            const columnName = (process.env.COLUMN_NAME || "unknown-column")
              .toLowerCase()   
              .replace(/\s+/g, '-') 
              .replace(/[^a-z0-9-]/g, '');
            const columnDescription = process.env.COLUMN_DESCRIPTION || "No description available.";

            const columnEmailMapping = {
              "cip-announce": "amartin@linuxfoundation.org",
              "cip-vote": "amanda@riscv.org",
              "cip-discuss": "amanda@r-consortium.org",
              "draft": "amartin@linuxfoundation.org"
            };

            const emailRecipient = columnEmailMapping[columnName] || `amartin@linuxfoundation.org`;
            const subject = `${process.env.PR_TITLE} is in ${columnName}`;
            const body = `Hello,\n\n${process.env.PR_TITLE} ${columnDescription}\n\nLink to PR: ${process.env.PR_LINK}\n\nPlease let us know if you have any questions or concerns.`;

            const payload = {
              personalizations: [{
                to: [{ email: emailRecipient }]
              }],
              from: { email: "amartin@linuxfoundation.org" },
              subject: subject,
              content: [{
                type: "text/plain",
                value: body
              }],
              tracking_settings: {
                click_tracking: { enable: false }
              }
            };

            console.log(`📤 Sending email to: ${emailRecipient}`);
            console.log("📤 Sending email with this JSON payload:");
            console.log(JSON.stringify(payload, null, 2));

            const response = await fetch("https://api.sendgrid.com/v3/mail/send", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${process.env.SENDGRID_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify(payload)
            });

            console.log(`📨 SendGrid Response Status: ${response.status}`);
            console.log(`📨 SendGrid Response Body:`, await response.text());

            if (!response.ok) {
              process.exit(1);
            }
