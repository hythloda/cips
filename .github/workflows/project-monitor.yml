name: Monitor GitHub Project Moves

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch:

jobs:
  check_project:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub Project Data
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }} # Use PAT token instead of default GITHUB_TOKEN
          PROJECT_ID: "PVT_kwHOAxVMgM4AxMpK" # Replace with your actual project ID
        run: |
          echo "Fetching project data..."
          QUERY='
          {
            node(id: "'"$PROJECT_ID"'") {
              ... on ProjectV2 {
                id
                items(first: 5) {
                  nodes {
                    id
                    content {
                      ... on PullRequest {
                        title
                        url
                      }
                    }
                    fieldValues(first: 10) {
                      nodes {
                        __typename
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                        }
                        ... on ProjectV2ItemFieldTextValue {
                          text
                        }
                        ... on ProjectV2ItemFieldNumberValue {
                          number
                        }
                      }
                    }
                  }
                }
              }
            }
          }'
          RESPONSE=$(gh api graphql -f query="$QUERY")

          echo "Full GraphQL Response:"
          echo "$RESPONSE"
      - name: Query GitHub Project for Moved Cards
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }} # Use PAT token instead of default GITHUB_TOKEN
          PROJECT_ID: "PVT_kwHOAxVMgM4AxMpK" # Replace with your actual project ID
        run: |
          echo "Fetching project data..."
          QUERY='
          {
            node(id: "'"$PROJECT_ID"'") {
              ... on ProjectV2 {
                id
                fields(first: 20) {  # Fetch all available fields (columns)
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      name
                      options {
                        id
                        name
                        description
                      }
                    }
                  }
                }
                items(first: 10) {
                  nodes {
                    id
                    content {
                      ... on PullRequest {
                        title
                        url
                      }
                    }
                    fieldValues(first: 10) {
                      nodes {
                        __typename
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                          optionId
                        }
                      }
                    }
                  }
                }
              }
            }
          }'
          RESPONSE=$(gh api graphql -f query="$QUERY")

          echo "GraphQL Response: $RESPONSE"

          PR_TITLE=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].content.title')
          PR_LINK=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].content.url')
          COLUMN_NAME=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].fieldValues.nodes[] | select(.__typename=="ProjectV2ItemFieldSingleSelectValue") | .name')
          OPTION_ID=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].fieldValues.nodes[] | select(.__typename=="ProjectV2ItemFieldSingleSelectValue") | .optionId')

          COLUMN_DESCRIPTION=$(echo "$RESPONSE" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.id=="'"$OPTION_ID"'") | .description')

          if [[ -z "$COLUMN_NAME" || "$COLUMN_NAME" == "null" ]]; then
            COLUMN_NAME="Unknown Column"
          fi

          if [[ -z "$COLUMN_DESCRIPTION" || "$COLUMN_DESCRIPTION" == "null" ]]; then
            COLUMN_DESCRIPTION="No description available."
          fi

          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV
          echo "COLUMN_NAME=$COLUMN_NAME" >> $GITHUB_ENV
          echo "COLUMN_DESCRIPTION=$COLUMN_DESCRIPTION" >> $GITHUB_ENV
          echo "âœ… Detected PR: $PR_TITLE moved to $COLUMN_NAME - $COLUMN_DESCRIPTION"

      - name: Send Email via SendGrid API (GitHub Script)
        if: env.PR_TITLE != ''
        uses: actions/github-script@v6
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        with:
          script: |
            const columnName = process.env.COLUMN_NAME || "Unknown Column";
            const columnDescription = process.env.COLUMN_DESCRIPTION || "No description available.";

            const subject = `${process.env.PR_TITLE} is in ${columnName}`;
            const body = `Hello,\n\n'${process.env.PR_TITLE}' is now in '${columnName}'.\n\n**Description:** ${columnDescription}\n\nLink to PR: ${process.env.PR_LINK}\n\nPlease let us know if you have any questions or concerns.`;

            const payload = {
              personalizations: [{
                to: [{ email: "amartin@linuxfoundation.org" }]
              }],
              from: { email: "amartin@linuxfoundation.org" },
              subject: subject,
              content: [{
                type: "text/plain",
                value: body
              }],
              tracking_settings: {
                click_tracking: { enable: false }
              }
            };

            console.log("ðŸ“¤ Sending email with this JSON payload:");
            console.log(JSON.stringify(payload, null, 2));

            const response = await fetch("https://api.sendgrid.com/v3/mail/send", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${process.env.SENDGRID_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify(payload)
            });

            console.log(`ðŸ“¨ SendGrid Response Status: ${response.status}`);
            console.log(`ðŸ“¨ SendGrid Response Body:`, await response.text());

            if (!response.ok) {
              process.exit(1);
            }
