name: Monitor GitHub Project Moves

on:
  schedule:
    - cron: "*/5 * * * *" # Runs every 5 minutes
  workflow_dispatch:

jobs:
  check_project:
    runs-on: ubuntu-latest
    steps:
      - name: Query GitHub Project for Moved Cards
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }} # Use Personal Access Token instead of default GITHUB_TOKEN
          PROJECT_ID: "PVT_kwHOAxVMgM4AxMpK" # Replace with your actual project ID
        run: |
          echo "Fetching project data..."
          QUERY='
          {
            node(id: "'"$PROJECT_ID"'") {
              ... on ProjectV2 {
                id
                items(first: 10) {
                  nodes {
                    id
                    content {
                      ... on PullRequest {
                        title
                        url
                      }
                    }
                    fieldValues(first: 10) {
                      nodes {
                        ... on ProjectV2ItemFieldSingleSelectValue {
                          name
                        }
                      }
                    }
                  }
                }
              }
            }
          }'
          RESPONSE=$(GH_TOKEN=${{ secrets.PAT_TOKEN }} gh api graphql -f query="$QUERY")

          echo "GraphQL Response: $RESPONSE"

          PR_TITLE=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].content.title')
          PR_LINK=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].content.url')
          COLUMN_NAME=$(echo "$RESPONSE" | jq -r '.data.node.items.nodes[0].fieldValues.nodes[0].name')

          if [[ -n "$PR_TITLE" && -n "$COLUMN_NAME" ]]; then
            echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
            echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV
            echo "COLUMN_NAME=$COLUMN_NAME" >> $GITHUB_ENV
            echo "Detected PR: $PR_TITLE moved to $COLUMN_NAME"
          else
            echo "No PR move detected"
            exit 0
          fi

      - name: Send Email via SendGrid API (GitHub Script)
        if: env.PR_TITLE != ''
        uses: actions/github-script@v6
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }} # Explicitly pass the secret
        with:
          script: |
            const apiKey = process.env.SENDGRID_API_KEY;
            if (!apiKey) {
              console.log("‚ùå SendGrid API key is missing!");
              process.exit(1);
            }

            const emailRecipient = "amartin@linuxfoundation.org";
            const emailSender = "amartin@linuxfoundation.org";
            const prTitle = process.env.PR_TITLE || "Unknown PR";
            const prLink = process.env.PR_LINK || "No link available";
            const columnName = process.env.COLUMN_NAME || "Unknown Column";

            const subject = `${prTitle} is in ${columnName}`;
            const body = `Hello,\n\nWe have created a draft of '${prTitle}' that is ready for your discussion.\n\nLink to PR: ${prLink}`;

            const payload = {
              personalizations: [{
                to: [{ email: emailRecipient }]
              }],
              from: { email: emailSender },
              subject: subject,
              content: [{
                type: "text/plain",
                value: body
              }]
            };

            console.log("üì§ Sending email with this JSON payload:");
            console.log(JSON.stringify(payload, null, 2));

            const response = await fetch("https://api.sendgrid.com/v3/mail/send", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${apiKey}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify(payload)
            });

            console.log(`üì® SendGrid Response Status: ${response.status}`);
            console.log(`üì® SendGrid Response Body:`, await response.text());

            if (!response.ok) {
              process.exit(1);
            }
